// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: gcsInfoCatch.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GcsInfoCatchServiceDockerClient is the client API for GcsInfoCatchServiceDocker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GcsInfoCatchServiceDockerClient interface {
	// 定义docker操作方法
	DockerContainerImagePull(ctx context.Context, in *ImagePullRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_DockerContainerImagePullClient, error)
	DockerContainerDelete(ctx context.Context, in *DeleteRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_DockerContainerDeleteClient, error)
	DockerContainerStatus(ctx context.Context, in *StatusRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_DockerContainerStatusClient, error)
	DockerContainerLogs(ctx context.Context, in *LogsRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_DockerContainerLogsClient, error)
	DockerContainerStart(ctx context.Context, in *StartRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_DockerContainerStartClient, error)
	// 定义nvml操作方法
	NvmlUtilizationRate(ctx context.Context, in *NvmlInfoReuqestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_NvmlUtilizationRateClient, error)
}

type gcsInfoCatchServiceDockerClient struct {
	cc grpc.ClientConnInterface
}

func NewGcsInfoCatchServiceDockerClient(cc grpc.ClientConnInterface) GcsInfoCatchServiceDockerClient {
	return &gcsInfoCatchServiceDockerClient{cc}
}

func (c *gcsInfoCatchServiceDockerClient) DockerContainerImagePull(ctx context.Context, in *ImagePullRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_DockerContainerImagePullClient, error) {
	stream, err := c.cc.NewStream(ctx, &GcsInfoCatchServiceDocker_ServiceDesc.Streams[0], "/proto.GcsInfoCatchServiceDocker/DockerContainerImagePull", opts...)
	if err != nil {
		return nil, err
	}
	x := &gcsInfoCatchServiceDockerDockerContainerImagePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GcsInfoCatchServiceDocker_DockerContainerImagePullClient interface {
	Recv() (*ImagePullRespondMsg, error)
	grpc.ClientStream
}

type gcsInfoCatchServiceDockerDockerContainerImagePullClient struct {
	grpc.ClientStream
}

func (x *gcsInfoCatchServiceDockerDockerContainerImagePullClient) Recv() (*ImagePullRespondMsg, error) {
	m := new(ImagePullRespondMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gcsInfoCatchServiceDockerClient) DockerContainerDelete(ctx context.Context, in *DeleteRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_DockerContainerDeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &GcsInfoCatchServiceDocker_ServiceDesc.Streams[1], "/proto.GcsInfoCatchServiceDocker/DockerContainerDelete", opts...)
	if err != nil {
		return nil, err
	}
	x := &gcsInfoCatchServiceDockerDockerContainerDeleteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GcsInfoCatchServiceDocker_DockerContainerDeleteClient interface {
	Recv() (*DeleteRespondMsg, error)
	grpc.ClientStream
}

type gcsInfoCatchServiceDockerDockerContainerDeleteClient struct {
	grpc.ClientStream
}

func (x *gcsInfoCatchServiceDockerDockerContainerDeleteClient) Recv() (*DeleteRespondMsg, error) {
	m := new(DeleteRespondMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gcsInfoCatchServiceDockerClient) DockerContainerStatus(ctx context.Context, in *StatusRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_DockerContainerStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &GcsInfoCatchServiceDocker_ServiceDesc.Streams[2], "/proto.GcsInfoCatchServiceDocker/DockerContainerStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &gcsInfoCatchServiceDockerDockerContainerStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GcsInfoCatchServiceDocker_DockerContainerStatusClient interface {
	Recv() (*StatusRespondMsg, error)
	grpc.ClientStream
}

type gcsInfoCatchServiceDockerDockerContainerStatusClient struct {
	grpc.ClientStream
}

func (x *gcsInfoCatchServiceDockerDockerContainerStatusClient) Recv() (*StatusRespondMsg, error) {
	m := new(StatusRespondMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gcsInfoCatchServiceDockerClient) DockerContainerLogs(ctx context.Context, in *LogsRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_DockerContainerLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GcsInfoCatchServiceDocker_ServiceDesc.Streams[3], "/proto.GcsInfoCatchServiceDocker/DockerContainerLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &gcsInfoCatchServiceDockerDockerContainerLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GcsInfoCatchServiceDocker_DockerContainerLogsClient interface {
	Recv() (*LogsRespondMsg, error)
	grpc.ClientStream
}

type gcsInfoCatchServiceDockerDockerContainerLogsClient struct {
	grpc.ClientStream
}

func (x *gcsInfoCatchServiceDockerDockerContainerLogsClient) Recv() (*LogsRespondMsg, error) {
	m := new(LogsRespondMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gcsInfoCatchServiceDockerClient) DockerContainerStart(ctx context.Context, in *StartRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_DockerContainerStartClient, error) {
	stream, err := c.cc.NewStream(ctx, &GcsInfoCatchServiceDocker_ServiceDesc.Streams[4], "/proto.GcsInfoCatchServiceDocker/DockerContainerStart", opts...)
	if err != nil {
		return nil, err
	}
	x := &gcsInfoCatchServiceDockerDockerContainerStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GcsInfoCatchServiceDocker_DockerContainerStartClient interface {
	Recv() (*StartRespondMsg, error)
	grpc.ClientStream
}

type gcsInfoCatchServiceDockerDockerContainerStartClient struct {
	grpc.ClientStream
}

func (x *gcsInfoCatchServiceDockerDockerContainerStartClient) Recv() (*StartRespondMsg, error) {
	m := new(StartRespondMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gcsInfoCatchServiceDockerClient) NvmlUtilizationRate(ctx context.Context, in *NvmlInfoReuqestMsg, opts ...grpc.CallOption) (GcsInfoCatchServiceDocker_NvmlUtilizationRateClient, error) {
	stream, err := c.cc.NewStream(ctx, &GcsInfoCatchServiceDocker_ServiceDesc.Streams[5], "/proto.GcsInfoCatchServiceDocker/NvmlUtilizationRate", opts...)
	if err != nil {
		return nil, err
	}
	x := &gcsInfoCatchServiceDockerNvmlUtilizationRateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GcsInfoCatchServiceDocker_NvmlUtilizationRateClient interface {
	Recv() (*NvmlInfoRespondMsg, error)
	grpc.ClientStream
}

type gcsInfoCatchServiceDockerNvmlUtilizationRateClient struct {
	grpc.ClientStream
}

func (x *gcsInfoCatchServiceDockerNvmlUtilizationRateClient) Recv() (*NvmlInfoRespondMsg, error) {
	m := new(NvmlInfoRespondMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GcsInfoCatchServiceDockerServer is the server API for GcsInfoCatchServiceDocker service.
// All implementations should embed UnimplementedGcsInfoCatchServiceDockerServer
// for forward compatibility
type GcsInfoCatchServiceDockerServer interface {
	// 定义docker操作方法
	DockerContainerImagePull(*ImagePullRequestMsg, GcsInfoCatchServiceDocker_DockerContainerImagePullServer) error
	DockerContainerDelete(*DeleteRequestMsg, GcsInfoCatchServiceDocker_DockerContainerDeleteServer) error
	DockerContainerStatus(*StatusRequestMsg, GcsInfoCatchServiceDocker_DockerContainerStatusServer) error
	DockerContainerLogs(*LogsRequestMsg, GcsInfoCatchServiceDocker_DockerContainerLogsServer) error
	DockerContainerStart(*StartRequestMsg, GcsInfoCatchServiceDocker_DockerContainerStartServer) error
	// 定义nvml操作方法
	NvmlUtilizationRate(*NvmlInfoReuqestMsg, GcsInfoCatchServiceDocker_NvmlUtilizationRateServer) error
}

// UnimplementedGcsInfoCatchServiceDockerServer should be embedded to have forward compatible implementations.
type UnimplementedGcsInfoCatchServiceDockerServer struct {
}

func (UnimplementedGcsInfoCatchServiceDockerServer) DockerContainerImagePull(*ImagePullRequestMsg, GcsInfoCatchServiceDocker_DockerContainerImagePullServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerContainerImagePull not implemented")
}
func (UnimplementedGcsInfoCatchServiceDockerServer) DockerContainerDelete(*DeleteRequestMsg, GcsInfoCatchServiceDocker_DockerContainerDeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerContainerDelete not implemented")
}
func (UnimplementedGcsInfoCatchServiceDockerServer) DockerContainerStatus(*StatusRequestMsg, GcsInfoCatchServiceDocker_DockerContainerStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerContainerStatus not implemented")
}
func (UnimplementedGcsInfoCatchServiceDockerServer) DockerContainerLogs(*LogsRequestMsg, GcsInfoCatchServiceDocker_DockerContainerLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerContainerLogs not implemented")
}
func (UnimplementedGcsInfoCatchServiceDockerServer) DockerContainerStart(*StartRequestMsg, GcsInfoCatchServiceDocker_DockerContainerStartServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerContainerStart not implemented")
}
func (UnimplementedGcsInfoCatchServiceDockerServer) NvmlUtilizationRate(*NvmlInfoReuqestMsg, GcsInfoCatchServiceDocker_NvmlUtilizationRateServer) error {
	return status.Errorf(codes.Unimplemented, "method NvmlUtilizationRate not implemented")
}

// UnsafeGcsInfoCatchServiceDockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GcsInfoCatchServiceDockerServer will
// result in compilation errors.
type UnsafeGcsInfoCatchServiceDockerServer interface {
	mustEmbedUnimplementedGcsInfoCatchServiceDockerServer()
}

func RegisterGcsInfoCatchServiceDockerServer(s grpc.ServiceRegistrar, srv GcsInfoCatchServiceDockerServer) {
	s.RegisterService(&GcsInfoCatchServiceDocker_ServiceDesc, srv)
}

func _GcsInfoCatchServiceDocker_DockerContainerImagePull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImagePullRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GcsInfoCatchServiceDockerServer).DockerContainerImagePull(m, &gcsInfoCatchServiceDockerDockerContainerImagePullServer{stream})
}

type GcsInfoCatchServiceDocker_DockerContainerImagePullServer interface {
	Send(*ImagePullRespondMsg) error
	grpc.ServerStream
}

type gcsInfoCatchServiceDockerDockerContainerImagePullServer struct {
	grpc.ServerStream
}

func (x *gcsInfoCatchServiceDockerDockerContainerImagePullServer) Send(m *ImagePullRespondMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GcsInfoCatchServiceDocker_DockerContainerDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GcsInfoCatchServiceDockerServer).DockerContainerDelete(m, &gcsInfoCatchServiceDockerDockerContainerDeleteServer{stream})
}

type GcsInfoCatchServiceDocker_DockerContainerDeleteServer interface {
	Send(*DeleteRespondMsg) error
	grpc.ServerStream
}

type gcsInfoCatchServiceDockerDockerContainerDeleteServer struct {
	grpc.ServerStream
}

func (x *gcsInfoCatchServiceDockerDockerContainerDeleteServer) Send(m *DeleteRespondMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GcsInfoCatchServiceDocker_DockerContainerStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GcsInfoCatchServiceDockerServer).DockerContainerStatus(m, &gcsInfoCatchServiceDockerDockerContainerStatusServer{stream})
}

type GcsInfoCatchServiceDocker_DockerContainerStatusServer interface {
	Send(*StatusRespondMsg) error
	grpc.ServerStream
}

type gcsInfoCatchServiceDockerDockerContainerStatusServer struct {
	grpc.ServerStream
}

func (x *gcsInfoCatchServiceDockerDockerContainerStatusServer) Send(m *StatusRespondMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GcsInfoCatchServiceDocker_DockerContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GcsInfoCatchServiceDockerServer).DockerContainerLogs(m, &gcsInfoCatchServiceDockerDockerContainerLogsServer{stream})
}

type GcsInfoCatchServiceDocker_DockerContainerLogsServer interface {
	Send(*LogsRespondMsg) error
	grpc.ServerStream
}

type gcsInfoCatchServiceDockerDockerContainerLogsServer struct {
	grpc.ServerStream
}

func (x *gcsInfoCatchServiceDockerDockerContainerLogsServer) Send(m *LogsRespondMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GcsInfoCatchServiceDocker_DockerContainerStart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GcsInfoCatchServiceDockerServer).DockerContainerStart(m, &gcsInfoCatchServiceDockerDockerContainerStartServer{stream})
}

type GcsInfoCatchServiceDocker_DockerContainerStartServer interface {
	Send(*StartRespondMsg) error
	grpc.ServerStream
}

type gcsInfoCatchServiceDockerDockerContainerStartServer struct {
	grpc.ServerStream
}

func (x *gcsInfoCatchServiceDockerDockerContainerStartServer) Send(m *StartRespondMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GcsInfoCatchServiceDocker_NvmlUtilizationRate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NvmlInfoReuqestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GcsInfoCatchServiceDockerServer).NvmlUtilizationRate(m, &gcsInfoCatchServiceDockerNvmlUtilizationRateServer{stream})
}

type GcsInfoCatchServiceDocker_NvmlUtilizationRateServer interface {
	Send(*NvmlInfoRespondMsg) error
	grpc.ServerStream
}

type gcsInfoCatchServiceDockerNvmlUtilizationRateServer struct {
	grpc.ServerStream
}

func (x *gcsInfoCatchServiceDockerNvmlUtilizationRateServer) Send(m *NvmlInfoRespondMsg) error {
	return x.ServerStream.SendMsg(m)
}

// GcsInfoCatchServiceDocker_ServiceDesc is the grpc.ServiceDesc for GcsInfoCatchServiceDocker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GcsInfoCatchServiceDocker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GcsInfoCatchServiceDocker",
	HandlerType: (*GcsInfoCatchServiceDockerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DockerContainerImagePull",
			Handler:       _GcsInfoCatchServiceDocker_DockerContainerImagePull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DockerContainerDelete",
			Handler:       _GcsInfoCatchServiceDocker_DockerContainerDelete_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DockerContainerStatus",
			Handler:       _GcsInfoCatchServiceDocker_DockerContainerStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DockerContainerLogs",
			Handler:       _GcsInfoCatchServiceDocker_DockerContainerLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DockerContainerStart",
			Handler:       _GcsInfoCatchServiceDocker_DockerContainerStart_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NvmlUtilizationRate",
			Handler:       _GcsInfoCatchServiceDocker_NvmlUtilizationRate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gcsInfoCatch.proto",
}
