// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: gcsInfoCatch.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GcsInfoCatchServiceClient is the client API for GcsInfoCatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GcsInfoCatchServiceClient interface {
	// 定义docker操作方法
	DockerContainerImagePull(ctx context.Context, in *ImagePullRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchService_DockerContainerImagePullClient, error)
	DockerContainerDelete(ctx context.Context, in *DeleteRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchService_DockerContainerDeleteClient, error)
	DockerContainerStatus(ctx context.Context, in *StatusRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchService_DockerContainerStatusClient, error)
	DockerContainerLogs(ctx context.Context, in *LogsRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchService_DockerContainerLogsClient, error)
	DockerContainerStart(ctx context.Context, in *StartRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchService_DockerContainerStartClient, error)
}

type gcsInfoCatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGcsInfoCatchServiceClient(cc grpc.ClientConnInterface) GcsInfoCatchServiceClient {
	return &gcsInfoCatchServiceClient{cc}
}

func (c *gcsInfoCatchServiceClient) DockerContainerImagePull(ctx context.Context, in *ImagePullRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchService_DockerContainerImagePullClient, error) {
	stream, err := c.cc.NewStream(ctx, &GcsInfoCatchService_ServiceDesc.Streams[0], "/proto.GcsInfoCatchService/DockerContainerImagePull", opts...)
	if err != nil {
		return nil, err
	}
	x := &gcsInfoCatchServiceDockerContainerImagePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GcsInfoCatchService_DockerContainerImagePullClient interface {
	Recv() (*ImagePullRespondMsg, error)
	grpc.ClientStream
}

type gcsInfoCatchServiceDockerContainerImagePullClient struct {
	grpc.ClientStream
}

func (x *gcsInfoCatchServiceDockerContainerImagePullClient) Recv() (*ImagePullRespondMsg, error) {
	m := new(ImagePullRespondMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gcsInfoCatchServiceClient) DockerContainerDelete(ctx context.Context, in *DeleteRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchService_DockerContainerDeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &GcsInfoCatchService_ServiceDesc.Streams[1], "/proto.GcsInfoCatchService/DockerContainerDelete", opts...)
	if err != nil {
		return nil, err
	}
	x := &gcsInfoCatchServiceDockerContainerDeleteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GcsInfoCatchService_DockerContainerDeleteClient interface {
	Recv() (*DeleteRespondMsg, error)
	grpc.ClientStream
}

type gcsInfoCatchServiceDockerContainerDeleteClient struct {
	grpc.ClientStream
}

func (x *gcsInfoCatchServiceDockerContainerDeleteClient) Recv() (*DeleteRespondMsg, error) {
	m := new(DeleteRespondMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gcsInfoCatchServiceClient) DockerContainerStatus(ctx context.Context, in *StatusRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchService_DockerContainerStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &GcsInfoCatchService_ServiceDesc.Streams[2], "/proto.GcsInfoCatchService/DockerContainerStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &gcsInfoCatchServiceDockerContainerStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GcsInfoCatchService_DockerContainerStatusClient interface {
	Recv() (*StatusRespondMsg, error)
	grpc.ClientStream
}

type gcsInfoCatchServiceDockerContainerStatusClient struct {
	grpc.ClientStream
}

func (x *gcsInfoCatchServiceDockerContainerStatusClient) Recv() (*StatusRespondMsg, error) {
	m := new(StatusRespondMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gcsInfoCatchServiceClient) DockerContainerLogs(ctx context.Context, in *LogsRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchService_DockerContainerLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GcsInfoCatchService_ServiceDesc.Streams[3], "/proto.GcsInfoCatchService/DockerContainerLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &gcsInfoCatchServiceDockerContainerLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GcsInfoCatchService_DockerContainerLogsClient interface {
	Recv() (*LogsRespondMsg, error)
	grpc.ClientStream
}

type gcsInfoCatchServiceDockerContainerLogsClient struct {
	grpc.ClientStream
}

func (x *gcsInfoCatchServiceDockerContainerLogsClient) Recv() (*LogsRespondMsg, error) {
	m := new(LogsRespondMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gcsInfoCatchServiceClient) DockerContainerStart(ctx context.Context, in *StartRequestMsg, opts ...grpc.CallOption) (GcsInfoCatchService_DockerContainerStartClient, error) {
	stream, err := c.cc.NewStream(ctx, &GcsInfoCatchService_ServiceDesc.Streams[4], "/proto.GcsInfoCatchService/DockerContainerStart", opts...)
	if err != nil {
		return nil, err
	}
	x := &gcsInfoCatchServiceDockerContainerStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GcsInfoCatchService_DockerContainerStartClient interface {
	Recv() (*StartRespondMsg, error)
	grpc.ClientStream
}

type gcsInfoCatchServiceDockerContainerStartClient struct {
	grpc.ClientStream
}

func (x *gcsInfoCatchServiceDockerContainerStartClient) Recv() (*StartRespondMsg, error) {
	m := new(StartRespondMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GcsInfoCatchServiceServer is the server API for GcsInfoCatchService service.
// All implementations should embed UnimplementedGcsInfoCatchServiceServer
// for forward compatibility
type GcsInfoCatchServiceServer interface {
	// 定义docker操作方法
	DockerContainerImagePull(*ImagePullRequestMsg, GcsInfoCatchService_DockerContainerImagePullServer) error
	DockerContainerDelete(*DeleteRequestMsg, GcsInfoCatchService_DockerContainerDeleteServer) error
	DockerContainerStatus(*StatusRequestMsg, GcsInfoCatchService_DockerContainerStatusServer) error
	DockerContainerLogs(*LogsRequestMsg, GcsInfoCatchService_DockerContainerLogsServer) error
	DockerContainerStart(*StartRequestMsg, GcsInfoCatchService_DockerContainerStartServer) error
}

// UnimplementedGcsInfoCatchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGcsInfoCatchServiceServer struct {
}

func (UnimplementedGcsInfoCatchServiceServer) DockerContainerImagePull(*ImagePullRequestMsg, GcsInfoCatchService_DockerContainerImagePullServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerContainerImagePull not implemented")
}
func (UnimplementedGcsInfoCatchServiceServer) DockerContainerDelete(*DeleteRequestMsg, GcsInfoCatchService_DockerContainerDeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerContainerDelete not implemented")
}
func (UnimplementedGcsInfoCatchServiceServer) DockerContainerStatus(*StatusRequestMsg, GcsInfoCatchService_DockerContainerStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerContainerStatus not implemented")
}
func (UnimplementedGcsInfoCatchServiceServer) DockerContainerLogs(*LogsRequestMsg, GcsInfoCatchService_DockerContainerLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerContainerLogs not implemented")
}
func (UnimplementedGcsInfoCatchServiceServer) DockerContainerStart(*StartRequestMsg, GcsInfoCatchService_DockerContainerStartServer) error {
	return status.Errorf(codes.Unimplemented, "method DockerContainerStart not implemented")
}

// UnsafeGcsInfoCatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GcsInfoCatchServiceServer will
// result in compilation errors.
type UnsafeGcsInfoCatchServiceServer interface {
	mustEmbedUnimplementedGcsInfoCatchServiceServer()
}

func RegisterGcsInfoCatchServiceServer(s grpc.ServiceRegistrar, srv GcsInfoCatchServiceServer) {
	s.RegisterService(&GcsInfoCatchService_ServiceDesc, srv)
}

func _GcsInfoCatchService_DockerContainerImagePull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImagePullRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GcsInfoCatchServiceServer).DockerContainerImagePull(m, &gcsInfoCatchServiceDockerContainerImagePullServer{stream})
}

type GcsInfoCatchService_DockerContainerImagePullServer interface {
	Send(*ImagePullRespondMsg) error
	grpc.ServerStream
}

type gcsInfoCatchServiceDockerContainerImagePullServer struct {
	grpc.ServerStream
}

func (x *gcsInfoCatchServiceDockerContainerImagePullServer) Send(m *ImagePullRespondMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GcsInfoCatchService_DockerContainerDelete_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GcsInfoCatchServiceServer).DockerContainerDelete(m, &gcsInfoCatchServiceDockerContainerDeleteServer{stream})
}

type GcsInfoCatchService_DockerContainerDeleteServer interface {
	Send(*DeleteRespondMsg) error
	grpc.ServerStream
}

type gcsInfoCatchServiceDockerContainerDeleteServer struct {
	grpc.ServerStream
}

func (x *gcsInfoCatchServiceDockerContainerDeleteServer) Send(m *DeleteRespondMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GcsInfoCatchService_DockerContainerStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GcsInfoCatchServiceServer).DockerContainerStatus(m, &gcsInfoCatchServiceDockerContainerStatusServer{stream})
}

type GcsInfoCatchService_DockerContainerStatusServer interface {
	Send(*StatusRespondMsg) error
	grpc.ServerStream
}

type gcsInfoCatchServiceDockerContainerStatusServer struct {
	grpc.ServerStream
}

func (x *gcsInfoCatchServiceDockerContainerStatusServer) Send(m *StatusRespondMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GcsInfoCatchService_DockerContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GcsInfoCatchServiceServer).DockerContainerLogs(m, &gcsInfoCatchServiceDockerContainerLogsServer{stream})
}

type GcsInfoCatchService_DockerContainerLogsServer interface {
	Send(*LogsRespondMsg) error
	grpc.ServerStream
}

type gcsInfoCatchServiceDockerContainerLogsServer struct {
	grpc.ServerStream
}

func (x *gcsInfoCatchServiceDockerContainerLogsServer) Send(m *LogsRespondMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _GcsInfoCatchService_DockerContainerStart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GcsInfoCatchServiceServer).DockerContainerStart(m, &gcsInfoCatchServiceDockerContainerStartServer{stream})
}

type GcsInfoCatchService_DockerContainerStartServer interface {
	Send(*StartRespondMsg) error
	grpc.ServerStream
}

type gcsInfoCatchServiceDockerContainerStartServer struct {
	grpc.ServerStream
}

func (x *gcsInfoCatchServiceDockerContainerStartServer) Send(m *StartRespondMsg) error {
	return x.ServerStream.SendMsg(m)
}

// GcsInfoCatchService_ServiceDesc is the grpc.ServiceDesc for GcsInfoCatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GcsInfoCatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GcsInfoCatchService",
	HandlerType: (*GcsInfoCatchServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DockerContainerImagePull",
			Handler:       _GcsInfoCatchService_DockerContainerImagePull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DockerContainerDelete",
			Handler:       _GcsInfoCatchService_DockerContainerDelete_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DockerContainerStatus",
			Handler:       _GcsInfoCatchService_DockerContainerStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DockerContainerLogs",
			Handler:       _GcsInfoCatchService_DockerContainerLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DockerContainerStart",
			Handler:       _GcsInfoCatchService_DockerContainerStart_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gcsInfoCatch.proto",
}
